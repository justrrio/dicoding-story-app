(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&o(n)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();const P=(s,e)=>e.some(t=>s instanceof t);let b,S;function N(){return b||(b=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function D(){return S||(S=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const k=new WeakMap,y=new WeakMap,T=new WeakMap,p=new WeakMap,w=new WeakMap;function $(s){const e=new Promise((t,o)=>{const i=()=>{s.removeEventListener("success",r),s.removeEventListener("error",n)},r=()=>{t(u(s.result)),i()},n=()=>{o(s.error),i()};s.addEventListener("success",r),s.addEventListener("error",n)});return e.then(t=>{t instanceof IDBCursor&&k.set(t,s)}).catch(()=>{}),w.set(e,s),e}function x(s){if(y.has(s))return;const e=new Promise((t,o)=>{const i=()=>{s.removeEventListener("complete",r),s.removeEventListener("error",n),s.removeEventListener("abort",n)},r=()=>{t(),i()},n=()=>{o(s.error||new DOMException("AbortError","AbortError")),i()};s.addEventListener("complete",r),s.addEventListener("error",n),s.addEventListener("abort",n)});y.set(s,e)}let v={get(s,e,t){if(s instanceof IDBTransaction){if(e==="done")return y.get(s);if(e==="objectStoreNames")return s.objectStoreNames||T.get(s);if(e==="store")return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return u(s[e])},set(s,e,t){return s[e]=t,!0},has(s,e){return s instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in s}};function M(s){v=s(v)}function O(s){return s===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(e,...t){const o=s.call(m(this),e,...t);return T.set(o,e.sort?e.sort():[e]),u(o)}:D().includes(s)?function(...e){return s.apply(m(this),e),u(k.get(this))}:function(...e){return u(s.apply(m(this),e))}}function R(s){return typeof s=="function"?O(s):(s instanceof IDBTransaction&&x(s),P(s,N())?new Proxy(s,v):s)}function u(s){if(s instanceof IDBRequest)return $(s);if(p.has(s))return p.get(s);const e=R(s);return e!==s&&(p.set(s,e),w.set(e,s)),e}const m=s=>w.get(s);function C(s,e,{blocked:t,upgrade:o,blocking:i,terminated:r}={}){const n=indexedDB.open(s,e),a=u(n);return o&&n.addEventListener("upgradeneeded",c=>{o(u(n.result),c.oldVersion,c.newVersion,u(n.transaction),c)}),t&&n.addEventListener("blocked",c=>t(c.oldVersion,c.newVersion,c)),a.then(c=>{r&&c.addEventListener("close",()=>r()),i&&c.addEventListener("versionchange",l=>i(l.oldVersion,l.newVersion,l))}).catch(()=>{}),a}const H=["get","getKey","getAll","getAllKeys","count"],U=["put","add","delete","clear"],g=new Map;function E(s,e){if(!(s instanceof IDBDatabase&&!(e in s)&&typeof e=="string"))return;if(g.get(e))return g.get(e);const t=e.replace(/FromIndex$/,""),o=e!==t,i=U.includes(t);if(!(t in(o?IDBIndex:IDBObjectStore).prototype)||!(i||H.includes(t)))return;const r=async function(n,...a){const c=this.transaction(n,i?"readwrite":"readonly");let l=c.store;return o&&(l=l.index(a.shift())),(await Promise.all([l[t](...a),i&&c.done]))[0]};return g.set(e,r),r}M(s=>({...s,get:(e,t,o)=>E(e,t)||s.get(e,t,o),has:(e,t)=>!!E(e,t)||s.has(e,t)}));class B{constructor(){this.dbName="dicoding-story-db",this.version=1,this.db=null}async initDB(){try{this.db=await C(this.dbName,this.version,{upgrade(e){e.objectStoreNames.contains("stories")||e.createObjectStore("stories",{keyPath:"id"}).createIndex("createdAt","createdAt"),e.objectStoreNames.contains("favorites")||e.createObjectStore("favorites",{keyPath:"id"}).createIndex("addedAt","addedAt"),e.objectStoreNames.contains("offline-stories")||e.createObjectStore("offline-stories",{keyPath:"tempId",autoIncrement:!0}).createIndex("createdAt","createdAt")}}),console.log("IndexedDB initialized successfully")}catch(e){console.error("Error initializing IndexedDB:",e)}}async saveStory(e){try{this.db||await this.initDB();const t={...e,savedAt:new Date().toISOString()};await this.db.put("stories",t),console.log("Story saved to IndexedDB:",e.id)}catch(t){console.error("Error saving story to IndexedDB:",t)}}async getAllStories(){try{return this.db||await this.initDB(),(await this.db.getAll("stories")).sort((t,o)=>new Date(o.createdAt)-new Date(t.createdAt))}catch(e){return console.error("Error getting stories from IndexedDB:",e),[]}}async getStoryById(e){try{return this.db||await this.initDB(),await this.db.get("stories",e)}catch(t){return console.error("Error getting story from IndexedDB:",t),null}}async getStories(){return this.getAllStories()}async getStory(e){return this.getStoryById(e)}async deleteStory(e){try{this.db||await this.initDB(),await this.db.delete("stories",e),console.log("Story deleted from IndexedDB:",e)}catch(t){console.error("Error deleting story from IndexedDB:",t)}}async addToFavorites(e){try{this.db||await this.initDB();const t={...e,addedAt:new Date().toISOString()};await this.db.put("favorites",t),console.log("Story added to favorites:",e.id)}catch(t){console.error("Error adding to favorites:",t)}}async getAllFavorites(){try{return this.db||await this.initDB(),(await this.db.getAll("favorites")).sort((t,o)=>new Date(o.addedAt)-new Date(t.addedAt))}catch(e){return console.error("Error getting favorites from IndexedDB:",e),[]}}async getFavoriteById(e){try{return this.db||await this.initDB(),await this.db.get("favorites",e)}catch(t){return console.error("Error getting favorite by id:",t),null}}async getFavorites(){return this.getAllFavorites()}async removeFromFavorites(e){try{this.db||await this.initDB(),await this.db.delete("favorites",e),console.log("Story removed from favorites:",e)}catch(t){console.error("Error removing from favorites:",t)}}async isFavorite(e){try{return this.db||await this.initDB(),!!await this.db.get("favorites",e)}catch(t){return console.error("Error checking favorite status:",t),!1}}async saveOfflineStory(e){try{this.db||await this.initDB();const t=Date.now(),o={tempId:t,...e,createdAt:new Date().toISOString(),synced:!1};return await this.db.add("offline-stories",o),console.log("Offline story saved with tempId:",t),t}catch(t){return console.error("Error saving offline story:",t),null}}async getAllOfflineStories(){try{return this.db||await this.initDB(),await this.db.getAll("offline-stories")}catch(e){return console.error("Error getting offline stories:",e),[]}}async getOfflineStories(){return this.getAllOfflineStories()}async deleteOfflineStory(e){try{this.db||await this.initDB(),await this.db.delete("offline-stories",e),console.log("Offline story deleted:",e)}catch(t){console.error("Error deleting offline story:",t)}}async clearAllData(){try{this.db||await this.initDB(),await this.db.clear("stories"),await this.db.clear("favorites"),await this.db.clear("offline-stories"),console.log("All IndexedDB data cleared")}catch(e){console.error("Error clearing IndexedDB data:",e)}}async getDBInfo(){try{this.db||await this.initDB();const e=await this.db.count("stories"),t=await this.db.count("favorites"),o=await this.db.count("offline-stories");return{stories:e,favorites:t,offlineStories:o,total:e+t+o}}catch(e){return console.error("Error getting DB info:",e),{stories:0,favorites:0,offlineStories:0,total:0}}}}class z{constructor(){this.baseUrl="https://story-api.dicoding.dev/v1",this.token=localStorage.getItem("token")||null,this.dbHelper=new B}async register(e,t,o){try{if(!e||!t||!o)return{error:!0,message:"Name, email, and password are required"};if(o.length<8)return{error:!0,message:"Password must be at least 8 characters long"};const r=await(await fetch(`${this.baseUrl}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:o})})).json();return r.error&&console.warn("Registration API error:",r.message),r}catch(i){throw new Error(`Failed to register: ${i.message}`)}}async login(e,t){try{const i=await(await fetch(`${this.baseUrl}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})})).json();return i.error?console.warn("Login API error:",i.message):(localStorage.setItem("token",i.loginResult.token),localStorage.setItem("userId",i.loginResult.userId),localStorage.setItem("name",i.loginResult.name),this.token=i.loginResult.token),i}catch(o){throw new Error(`Failed to login: ${o.message}`)}}logout(){localStorage.removeItem("token"),localStorage.removeItem("userId"),localStorage.removeItem("name"),this.token=null}isLoggedIn(){return!!this.token}async getStories(e=1,t=10,o=0){try{if(!navigator.onLine)return{error:!1,message:"Stories retrieved from cache",listStory:await this.dbHelper.getAllStories()};const i=new URL(`${this.baseUrl}/stories`);i.searchParams.append("page",e),i.searchParams.append("size",t),i.searchParams.append("location",o);const n=await(await fetch(i,{headers:{Authorization:`Bearer ${this.token}`}})).json();if(n.error===!1&&n.listStory)for(const a of n.listStory)await this.dbHelper.saveStory(a);return n}catch(i){console.error("Error fetching stories:",i);const r=await this.dbHelper.getAllStories();if(r.length>0)return{error:!1,message:"Stories retrieved from cache (network error)",listStory:r};throw new Error(`Failed to fetch stories: ${i.message}`)}}async getStoryDetail(e){try{if(!navigator.onLine){const i=await this.dbHelper.getStoryById(e);if(i)return{error:!1,message:"Story retrieved from cache",story:i}}const o=await(await fetch(`${this.baseUrl}/stories/${e}`,{headers:{Authorization:`Bearer ${this.token}`}})).json();return o.error===!1&&o.story&&await this.dbHelper.saveStory(o.story),o}catch(t){console.error("Error fetching story detail:",t);const o=await this.dbHelper.getStoryById(e);if(o)return{error:!1,message:"Story retrieved from cache (network error)",story:o};throw new Error(`Failed to fetch story detail: ${t.message}`)}}async addStory(e){try{if(!navigator.onLine){console.log("Offline detected, saving story locally");const n=e.get("photo");let a=null;if(n&&n instanceof Blob)try{const f=await n.arrayBuffer(),d=btoa(String.fromCharCode(...new Uint8Array(f)));a=`data:${n.type};base64,${d}`}catch(f){console.error("Error converting photo to base64:",f)}const c={description:e.get("description"),photoBase64:a,photoType:n?n.type:"image/jpeg",lat:e.get("lat"),lon:e.get("lon"),createdAt:new Date().toISOString(),userId:localStorage.getItem("userId"),userName:localStorage.getItem("name")},l=await this.dbHelper.saveOfflineStory(c);return console.log("Story saved offline with tempId:",l),{error:!1,message:"Story saved offline. Will sync when online.",offline:!0,tempId:l}}const t=this.token?`${this.baseUrl}/stories`:`${this.baseUrl}/stories/guest`,o={};return this.token&&(o.Authorization=`Bearer ${this.token}`),await(await fetch(t,{method:"POST",headers:o,body:e})).json()}catch(t){console.error("Error adding story:",t);const o=e.get("photo");let i=null;if(o&&o instanceof Blob)try{const a=await o.arrayBuffer(),c=btoa(String.fromCharCode(...new Uint8Array(a)));i=`data:${o.type};base64,${c}`}catch(a){console.error("Error converting photo to base64 in catch block:",a)}const r={description:e.get("description"),photoBase64:i,photoType:o?o.type:"image/jpeg",lat:e.get("lat"),lon:e.get("lon"),createdAt:new Date().toISOString(),userId:localStorage.getItem("userId"),userName:localStorage.getItem("name")},n=await this.dbHelper.saveOfflineStory(r);return console.log("Story saved offline due to network error with tempId:",n),{error:!1,message:"Story saved offline due to network error. Will sync when online.",offline:!0,tempId:n}}}async syncOfflineStories(){try{if(!navigator.onLine)return!1;const e=await this.dbHelper.getAllOfflineStories(),t=[];for(const o of e)try{console.log("Syncing offline story:",o.description);const i=new FormData;if(i.append("description",o.description),o.photoBase64)try{const a=await(await fetch(o.photoBase64)).blob();i.append("photo",a,"photo.jpg")}catch(n){console.error("Error converting base64 to blob:",n);continue}o.lat&&i.append("lat",o.lat),o.lon&&i.append("lon",o.lon);const r=await this.addStory(i);!r.error&&!r.offline&&t.push(o.tempId)}catch(i){console.error("Error syncing story:",i)}for(const o of t)await this.dbHelper.deleteOfflineStory(o);return t.length}catch(e){return console.error("Error syncing offline stories:",e),!1}}async addToFavorites(e){return await this.dbHelper.addToFavorites(e)}async removeFromFavorites(e){return await this.dbHelper.removeFromFavorites(e)}async getFavorites(){return await this.dbHelper.getAllFavorites()}async isFavorite(e){return!!await this.dbHelper.getFavoriteById(e)}}class W{constructor(){this.app=document.getElementById("app-container")}render(e=[]){this.app.innerHTML=`
      <section class="container">
        <h2><i class="fas fa-book-open"></i> Latest Stories</h2>
        ${e.length===0?'<div class="loading"><div class="spinner"></div></div>':`<div class="story-list">
              ${e.map(t=>this._createStoryCardTemplate(t)).join("")}
            </div>`}
      </section>
    `,this._attachEventListeners()}_createStoryCardTemplate(e){return`
      <article class="story-card" data-story-id="${e.id}">
        <div class="story-thumbnail">
          <img src="${e.photoUrl}" alt="Story by ${e.name}" loading="lazy">
          <button class="favorite-btn" data-story-id="${e.id}" title="Add to favorites">
            <i class="far fa-heart" id="heart-${e.id}"></i>
          </button>
        </div>
        <div class="story-info">
          <div class="story-header">
            <div class="author-info">
              <div class="author-avatar">
                <i class="fas fa-user-circle"></i>
              </div>
              <div class="author-details">
                <span class="author-name">${e.name}</span>
                <span class="upload-date">${this._formatDate(e.createdAt)}</span>
              </div>
            </div>
          </div>
          <div class="story-content">
            <h3 class="story-title">${this._truncateDescription(e.description,60)}</h3>
            <p class="story-description">${this._truncateDescription(e.description,120)}</p>
          </div>
          <div class="story-actions">
            <a href="#/story/${e.id}" class="btn-detail">
              <i class="fas fa-eye"></i> View Details
            </a>
          </div>
        </div>
      </article>
    `}_truncateDescription(e,t=100){return e.length<=t?e:e.substring(0,t)+"..."}_formatDate(e){const t={year:"numeric",month:"short",day:"numeric"};return new Date(e).toLocaleDateString("en-US",t)}_attachEventListeners(){const e=document.querySelector(".story-list");e&&e.addEventListener("click",t=>{if(t.target.closest(".favorite-btn")){const o=t.target.closest(".favorite-btn"),i=o.dataset.storyId;this._handleFavoriteToggle(i,o)}})}_handleFavoriteToggle(e,t){const o=t.closest(".story-card"),i=this._extractStoryDataFromCard(o),r=new CustomEvent("favorite:toggle",{detail:{storyId:e,storyData:i}});document.dispatchEvent(r);const n=t.querySelector("i");t.classList.add("loading"),n.className="fas fa-spinner fa-spin"}_extractStoryDataFromCard(e){const t=e.dataset.storyId,o=e.querySelector("img"),i=e.querySelector("h3").textContent,r=e.querySelector("p").textContent;return{id:t,name:i,description:r,photoUrl:o.src}}updateFavoriteButton(e,t){const o=document.querySelector(`[data-story-id="${e}"].favorite-btn`),i=document.getElementById(`heart-${e}`);o&&i&&(o.classList.remove("loading"),t?(i.className="fas fa-heart",o.classList.add("favorited"),o.title="Remove from favorites"):(i.className="far fa-heart",o.classList.remove("favorited"),o.title="Add to favorites"))}showToast(e,t="success"){const o=document.createElement("div");o.className=`toast toast-${t}`,o.innerHTML=`
      <div class="toast-content">
        <i class="fas ${t==="success"?"fa-check-circle":"fa-exclamation-circle"}"></i>
        <span>${e}</span>
      </div>
    `,document.body.appendChild(o),setTimeout(()=>o.classList.add("show"),100),setTimeout(()=>{o.classList.remove("show"),setTimeout(()=>document.body.removeChild(o),300)},3e3)}}class q{constructor(){this.app=document.getElementById("app-container")}render(e=null,t=!0){if(t){this.app.innerHTML=`
        <section class="container">
          <div class="loading"><div class="spinner"></div></div>
        </section>
      `;return}if(!e||e.error){this.app.innerHTML=`
        <section class="container">
          <div class="alert alert-danger">
            <p>Failed to load story. ${(e==null?void 0:e.message)||"Please try again later."}</p>
          </div>
          <a href="#/" class="btn"><i class="fas fa-arrow-left"></i> Back to Home</a>
        </section>
      `;return}const{story:o}=e,i=o.lat!==null&&o.lon!==null;this.app.innerHTML=`
      <section class="container">
        <div class="story-detail">
          <img src="${o.photoUrl}" alt="Photo by ${o.name}" class="story-detail-image">          <div class="story-detail-content">
            <div class="story-detail-header">
              <h2>${o.name}</h2>
              <button class="favorite-btn btn-icon" data-story-id="${o.id}" title="Toggle favorite">
                <i class="far fa-heart" id="favorite-icon-${o.id}"></i>
              </button>
            </div>
            <p class="story-meta"><i class="far fa-clock"></i> ${this._formatDate(o.createdAt)}</p>
            <p>${o.description}</p>
            ${i?`
              <div class="map-container">
                <div id="mapid"></div>
              </div>
            `:""}
          </div>
          <a href="#/" class="btn"><i class="fas fa-arrow-left"></i> Back to Home</a>
        </div>
      </section>
    `,i&&this._initializeMap(o.lat,o.lon,o.name),this._setupFavoriteButton(o)}_setupFavoriteButton(e){const t=document.querySelector(`[data-story-id="${e.id}"]`);t&&t.addEventListener("click",o=>{o.preventDefault();const i=new CustomEvent("favorite:toggle",{detail:{storyId:e.id,storyData:e}});document.dispatchEvent(i)})}updateFavoriteButton(e,t){const o=document.getElementById(`favorite-icon-${e}`),i=document.querySelector(`[data-story-id="${e}"]`);o&&i&&(t?(o.className="fas fa-heart",i.classList.add("active"),i.title="Remove from favorites"):(o.className="far fa-heart",i.classList.remove("active"),i.title="Add to favorites"))}showToast(e,t="success"){const o=document.createElement("div");o.className=`toast toast-${t}`,o.innerHTML=`
      <div class="toast-content">
        <i class="fas ${t==="success"?"fa-check-circle":"fa-exclamation-circle"}"></i>
        <span>${e}</span>
      </div>
    `,document.body.appendChild(o),setTimeout(()=>o.classList.add("show"),100),setTimeout(()=>{o.classList.remove("show"),setTimeout(()=>document.body.removeChild(o),300)},3e3)}_formatDate(e){const t={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"};return new Date(e).toLocaleDateString("en-US",t)}_initializeMap(e,t,o){setTimeout(()=>{const i=L.map("mapid").setView([e,t],13);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(i),L.marker([e,t]).addTo(i).bindPopup(`<b>${o}'s Story Location</b>`).openPopup()},100)}}class V{constructor(){this.app=document.getElementById("app-container"),this.stream=null}render(){this.app.innerHTML=`
      <section class="container">
        <div class="form-container">
          <h2><i class="fas fa-plus-circle"></i> Add New Story</h2>
          <form id="add-story-form">
            <div class="form-group">
              <label for="description">Description</label>
              <textarea id="description" class="form-control" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label>Take a Photo</label>
              <div class="camera-container">
                <div class="camera-preview">
                  <video id="camera-preview" autoplay></video>
                  <canvas id="canvas" style="display: none;"></canvas>
                </div>
                <div class="camera-buttons">
                  <button type="button" class="btn" id="start-camera"><i class="fas fa-camera"></i> Start Camera</button>
                  <button type="button" class="btn" id="capture-photo" style="display: none;"><i class="fas fa-camera-retro"></i> Capture</button>
                  <button type="button" class="btn" id="retry-photo" style="display: none;"><i class="fas fa-redo"></i> Retry</button>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label>Select Location</label>
              <div class="map-container">
                <div id="mapid"></div>
              </div>
              <p class="form-text">Click on the map to select a location</p>
              <input type="hidden" id="lat" name="lat">
              <input type="hidden" id="lon" name="lon">
              <div id="selected-location" class="selected-location"></div>
            </div>
            <button type="submit" class="btn btn-block" id="submit-story">Submit Story</button>
            <button type="button" class="btn btn-secondary btn-block" id="test-notification" style="margin-top: 10px;">Test Notification</button>
          </form>
        </div>
      </section>
    `,this._initializeMap(),this._attachEventListeners()}_initializeMap(){setTimeout(()=>{const e=L.map("mapid").setView([-6.2,106.816],13);let t;L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(e),L.Control.geocoder({defaultMarkGeocode:!1}).on("markgeocode",function(o){const i=o.geocode.bbox,r=L.polygon([i.getSouthEast(),i.getNorthEast(),i.getNorthWest(),i.getSouthWest()]).addTo(e);e.fitBounds(r.getBounds())}).addTo(e),e.on("click",o=>{const{lat:i,lng:r}=o.latlng;document.getElementById("lat").value=i,document.getElementById("lon").value=r,document.getElementById("selected-location").innerHTML=`
          <p><strong>Selected Location:</strong> Lat: ${i.toFixed(6)}, Long: ${r.toFixed(6)}</p>
        `,t?t.setLatLng([i,r]):t=L.marker([i,r]).addTo(e),t.bindPopup("Your story location").openPopup()}),this.map=e},100)}_attachEventListeners(){const e=document.getElementById("start-camera"),t=document.getElementById("capture-photo"),o=document.getElementById("retry-photo"),i=document.getElementById("add-story-form"),r=document.getElementById("test-notification");e.addEventListener("click",()=>this._startCamera()),t.addEventListener("click",()=>this._capturePhoto()),o.addEventListener("click",()=>this._retryPhoto()),i.addEventListener("submit",n=>this._handleSubmit(n)),r.addEventListener("click",()=>this._testNotification())}_startCamera(){const e=document.getElementById("camera-preview"),t=document.getElementById("start-camera"),o=document.getElementById("capture-photo");navigator.mediaDevices.getUserMedia({video:!0}).then(i=>{this.stream=i,e.srcObject=i,t.style.display="none",o.style.display="block"}).catch(i=>{console.error("Error accessing camera:",i),alert("Error accessing camera. Please make sure your camera is enabled and try again.")})}_capturePhoto(){const e=document.getElementById("camera-preview"),t=document.getElementById("canvas"),o=document.getElementById("capture-photo"),i=document.getElementById("retry-photo");t.width=e.videoWidth,t.height=e.videoHeight,t.getContext("2d").drawImage(e,0,0,t.width,t.height),this.stream&&this.stream.getTracks().forEach(r=>r.stop()),e.style.display="none",t.style.display="block",o.style.display="none",i.style.display="block"}_retryPhoto(){const e=document.getElementById("camera-preview"),t=document.getElementById("canvas"),o=document.getElementById("capture-photo"),i=document.getElementById("retry-photo");t.getContext("2d").clearRect(0,0,t.width,t.height),t.style.display="none",e.style.display="block",this._startCamera(),i.style.display="none",o.style.display="block"}_handleSubmit(e){e.preventDefault();const t=document.getElementById("description").value,o=document.getElementById("canvas"),i=document.getElementById("lat").value,r=document.getElementById("lon").value;if(o.style.display==="none"){alert("Please take a photo before submitting.");return}o.toBlob(n=>{const a=new FormData;a.append("description",t),a.append("photo",n,"photo.jpg"),i&&r&&(a.append("lat",i),a.append("lon",r));const c=new CustomEvent("story:submit",{detail:{formData:a}});document.dispatchEvent(c)},"image/jpeg")}showSubmitResult(e){console.log("showSubmitResult called with:",e);const t=document.getElementById("add-story-form");e.error?(console.log("Story submission failed, showing error message"),t.insertAdjacentHTML("afterbegin",`
        <div class="alert alert-danger">
          <p><i class="fas fa-exclamation-circle"></i> Failed to submit story: ${e.message}</p>
        </div>
      `)):(console.log("Story was successful, showing success message and redirecting"),t.innerHTML=`
        <div class="alert alert-success">
          <p><i class="fas fa-check-circle"></i> Story submitted successfully!</p>
          <p>Redirecting to home page...</p>
        </div>
        <a href="#/" class="btn btn-block">Back to Home</a>
      `,this.stream&&(this.stream.getTracks().forEach(o=>o.stop()),this.stream=null),console.log("Setting up redirect timer for 2 seconds"),setTimeout(()=>{console.log("Redirecting to home page now"),window.location.hash="#/"},2e3))}_testNotification(){console.log("Testing notification from view...");try{if(Notification.permission==="granted"){const e=new Notification("Test Notification",{body:"This is a test notification to check if notifications work",icon:"/icons/app-icon.svg"});e.onclick=function(){console.log("Test notification clicked"),e.close()},console.log("Test notification sent successfully")}else Notification.permission==="default"?Notification.requestPermission().then(e=>{e==="granted"?this._testNotification():alert("Notification permission denied. Please enable notifications in browser settings.")}):(console.log("Notification permission denied"),alert("Notification permission denied. Please enable notifications in browser settings."))}catch(e){console.error("Error sending test notification:",e),alert("Error sending test notification: "+e.message)}}cleanup(){this.stream&&(this.stream.getTracks().forEach(e=>e.stop()),this.stream=null)}}class j{constructor(){this.app=document.getElementById("app-container")}renderLogin(){this.app.innerHTML=`
      <section class="container">
        <div class="form-container">
          <h2><i class="fas fa-sign-in-alt"></i> Login</h2>
          <form id="login-form">
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="password">Password</label>
              <input type="password" id="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-block">Login</button>
            <p class="text-center mt-3">
              Don't have an account? <a href="#/register">Register</a>
            </p>
          </form>
        </div>
      </section>
    `,this._attachLoginEventListeners()}renderRegister(){this.app.innerHTML=`
      <section class="container">
        <div class="form-container">
          <h2><i class="fas fa-user-plus"></i> Register</h2>
          <form id="register-form">
            <div class="form-group">
              <label for="name">Name</label>
              <input type="text" id="name" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" class="form-control" required>
            </div>
            <div class="form-group">
              <label for="password">Password (min. 8 characters)</label>
              <input type="password" id="password" class="form-control" minlength="8" required>
            </div>
            <button type="submit" class="btn btn-block">Register</button>
            <p class="text-center mt-3">
              Already have an account? <a href="#/login">Login</a>
            </p>
          </form>
        </div>
      </section>
    `,this._attachRegisterEventListeners()}_attachLoginEventListeners(){const e=document.getElementById("login-form");if(!e){console.error("Login form not found when trying to attach event listeners");return}e.addEventListener("submit",t=>{t.preventDefault();const o=document.getElementById("email"),i=document.getElementById("password");if(!o||!i){console.error("Login form inputs not found");return}const r=o.value,n=i.value,a=new CustomEvent("auth:login",{detail:{email:r,password:n}});document.dispatchEvent(a)})}_attachRegisterEventListeners(){const e=document.getElementById("register-form");if(!e){console.error("Register form not found when trying to attach event listeners");return}e.addEventListener("submit",t=>{t.preventDefault();const o=document.getElementById("name"),i=document.getElementById("email"),r=document.getElementById("password");if(!o||!i||!r){console.error("Register form inputs not found");return}const n=o.value,a=i.value,c=r.value,l=new CustomEvent("auth:register",{detail:{name:n,email:a,password:c}});document.dispatchEvent(l)})}showAuthResult(e,t){const o=document.getElementById(`${t}-form`);if(!o){console.error(`Form with id "${t}-form" not found.`);return}const i=o.querySelector(".alert");i&&i.remove(),e.error?o.insertAdjacentHTML("afterbegin",`
        <div class="alert alert-danger">
          <p><i class="fas fa-exclamation-circle"></i> ${e.message}</p>
        </div>
      `):(o.insertAdjacentHTML("afterbegin",`
        <div class="alert alert-success">
          <p><i class="fas fa-check-circle"></i> ${e.message}</p>
        </div>
      `),t==="login"?(setTimeout(()=>{document.dispatchEvent(new CustomEvent("user:loggedIn"))},500),setTimeout(()=>{window.location.hash="#/"},1e3)):t==="register"&&setTimeout(()=>{window.location.hash="#/login"},1e3))}}class Y{constructor(){this.app=document.getElementById("app-container"),this.map=null,this.markers=[]}render(e=[]){console.log("MapView.render() called with",e.length,"stories"),this.app.innerHTML=`
      <section class="container">
        <h2><i class="fas fa-map-marked-alt"></i> Stories Map</h2>
        <div id="map-loading" class="alert">Loading map...</div>
        <div class="map-container">
          <div id="stories-map" style="height: 600px; width: 100%;"></div>
        </div>
        <div class="map-legend">
          <p><strong>Total Stories with Location:</strong> <span id="stories-count">${e.filter(o=>o.lat&&o.lon).length}</span></p>
          <p class="map-info">Click on any marker to see the story details</p>
        </div>
      </section>
    `;const t=document.querySelector(".map-container");t&&(t.style.display="block"),setTimeout(()=>{this._initializeMap(e);const o=document.getElementById("map-loading");o&&(o.style.display="none")},1e3)}_initializeMap(e){try{console.log("Initializing map with",e.length,"stories");const t=document.getElementById("stories-map");if(!t){console.error("Map container element #stories-map not found!");return}t.style.display="block";const o=t.getBoundingClientRect();if(console.log("Map container dimensions:",o.width,"x",o.height),(o.width===0||o.height===0)&&(console.warn("Map container has zero dimensions, setting explicit size"),t.style.width="100%",t.style.height="600px"),typeof L>"u"){console.error("Leaflet library not loaded"),t.innerHTML='<div class="alert alert-danger">Map library failed to load. Please refresh the page.</div>';return}this.map&&(console.log("Cleaning up previous map instance"),this.map.remove(),this.map=null),console.log("Creating new map instance"),this.map=L.map("stories-map",{center:[-2.5,118],zoom:5,scrollWheelZoom:!0,zoomControl:!0,preferCanvas:!0}),t.style.opacity="0.99",setTimeout(()=>{t.style.opacity="1"},0),console.log("Map object created successfully");const i=L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',maxZoom:19}),r=L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",{attribution:"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community",maxZoom:19}),n=L.tileLayer("https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:19}),a={OpenStreetMap:i,Satellite:r,"Dark Mode":n};i.addTo(this.map),L.control.layers(a).addTo(this.map),this._addStoryMarkers(e),setTimeout(()=>{console.log("Invalidating map size"),this.map.invalidateSize(!0),this._ensureMapIsRendered()},300)}catch(t){console.error("Error in _initializeMap:",t);const o=document.getElementById("stories-map");o&&(o.innerHTML='<div class="alert alert-danger">An error occurred while initializing the map. Please refresh the page.</div>')}}_addStoryMarkers(e){try{this.markers&&this.markers.length&&this.markers.forEach(t=>{this.map&&this.map.removeLayer(t)}),this.markers=[],e.forEach(t=>{if(t.lat&&t.lon)try{const o=L.marker([t.lat,t.lon]).addTo(this.map).bindPopup(`
                <div class="map-popup">
                  <h3>${t.name}</h3>
                  <img src="${t.photoUrl}" alt="Photo by ${t.name}" style="width: 100%; max-height: 120px; object-fit: cover;">
                  <p>${this._truncateDescription(t.description)}</p>
                  <a href="#/story/${t.id}" class="btn btn-small">View Details</a>
                </div>
              `);this.markers.push(o)}catch(o){console.error("Error creating marker for story:",t.id,o)}}),console.log(`Added ${this.markers.length} markers to the map`)}catch(t){console.error("Error in _addStoryMarkers:",t)}}_truncateDescription(e,t=50){return e.length<=t?e:e.substring(0,t)+"..."}_addStoryMarkers(e){this.markers.forEach(t=>this.map.removeLayer(t)),this.markers=[],e.forEach(t=>{if(t.lat&&t.lon){const o=L.marker([t.lat,t.lon]).addTo(this.map).bindPopup(`
            <div class="map-popup">
              <h3>${t.name}</h3>
              <img src="${t.photoUrl}" alt="Photo by ${t.name}" style="width: 100%; max-height: 120px; object-fit: cover;">
              <p>${this._truncateDescription(t.description)}</p>
              <a href="#/story/${t.id}" class="btn btn-small">View Details</a>
            </div>
          `);this.markers.push(o)}})}_truncateDescription(e,t=50){return e.length<=t?e:e.substring(0,t)+"..."}_ensureMapIsRendered(){if(!this.map)return;const e=document.getElementById("stories-map");if(!e)return;const t=document.querySelector(".leaflet-tile");(!t||window.getComputedStyle(t).display==="none")&&(console.log("Map tiles not properly rendered, trying to redraw"),this.map.invalidateSize(!0),setTimeout(()=>{const o=document.querySelector(".leaflet-tile");(!o||window.getComputedStyle(o).display==="none")&&(console.log("Map still not rendering properly, trying one more time with different approach"),e.style.display="none",setTimeout(()=>{e.style.display="block",this.map.invalidateSize(!0)},200))},500))}}class G{constructor(){this.app=document.getElementById("app-container")}render(e=[]){this.app.innerHTML=`
      <section class="container">
        <div class="favorites-header">
          <h2><i class="fas fa-heart"></i> My Favorites</h2>
          <p class="favorites-subtitle">
            ${e.length>0?`You have ${e.length} favorite ${e.length===1?"story":"stories"}`:"No favorite stories yet. Start adding some!"}
          </p>
        </div>
        
        <div id="favorites-container" class="favorites-container">
          ${this._renderFavorites(e)}
        </div>
        
        ${e.length===0?this._renderEmptyState():""}
      </section>
    `,this._attachEventListeners()}_renderFavorites(e){return e.length===0?"":`
      <div class="story-list">
        ${e.map(t=>`
          <article class="story-card" data-story-id="${t.id}">
            <div class="story-thumbnail">
              <img src="${t.photoUrl}" alt="Story by ${t.name}" loading="lazy">
              <button class="favorite-btn active" data-story-id="${t.id}" title="Remove from favorites">
                <i class="fas fa-heart" id="heart-${t.id}"></i>
              </button>
            </div>
            <div class="story-info">
              <div class="story-header">
                <div class="author-info">
                  <div class="author-avatar">
                    <i class="fas fa-user-circle"></i>
                  </div>
                  <div class="author-details">
                    <span class="author-name">${t.name||"Anonymous"}</span>
                    <span class="upload-date">${this._formatDate(t.addedAt||t.createdAt)}</span>
                  </div>
                </div>
              </div>
              <div class="story-content">
                <h3 class="story-title">${this._truncateText(t.description,60)}</h3>
                <p class="story-description">${this._truncateText(t.description,120)}</p>
              </div>
              <div class="story-actions">
                <button class="btn-detail view-btn" data-story-id="${t.id}">
                  <i class="fas fa-eye"></i> View Details
                </button>
              </div>
            </div>
          </article>
        `).join("")}
      </div>
    `}_renderEmptyState(){return`
      <div class="empty-state">
        <div class="empty-state-icon">
          <i class="far fa-heart"></i>
        </div>
        <h3>No Favorites Yet</h3>
        <p>Start exploring stories and add them to your favorites by clicking the heart icon!</p>
        <div class="empty-state-actions">
          <a href="#/" class="btn btn-primary">
            <i class="fas fa-home"></i> Browse Stories
          </a>
          <a href="#/map" class="btn btn-secondary">
            <i class="fas fa-map"></i> Explore Map
          </a>
        </div>
      </div>
    `}_attachEventListeners(){document.getElementById("favorites-container").addEventListener("click",t=>{if(t.target.closest(".favorite-btn")){const o=t.target.closest(".favorite-btn"),i=o.dataset.storyId;this._handleFavoriteToggle(i,o)}else if(t.target.closest(".btn-detail, .view-btn")){const i=t.target.closest(".btn-detail, .view-btn").dataset.storyId;this._handleViewStory(i)}else if(t.target.closest(".share-btn")){const i=t.target.closest(".share-btn").dataset.storyId;this._handleShareStory(i)}})}_handleFavoriteToggle(e,t){const o=new CustomEvent("favorite:toggle",{detail:{storyId:e}});document.dispatchEvent(o),t.classList.add("removing"),t.innerHTML='<i class="fas fa-spinner fa-spin"></i>'}_handleViewStory(e){window.location.hash=`#/story/${e}`}_handleShareStory(e){if(navigator.share)navigator.share({title:"Check out this story!",text:"I found this interesting story on Dicoding Story App",url:`${window.location.origin}${window.location.pathname}#/story/${e}`}).catch(console.error);else{const t=`${window.location.origin}${window.location.pathname}#/story/${e}`;navigator.clipboard.writeText(t).then(()=>{this.showToast("Story link copied to clipboard!")}).catch(()=>{this.showToast("Unable to share story","error")})}}showLoadingState(){this.app.innerHTML=`
      <section class="container">
        <div class="favorites-header">
          <h2><i class="fas fa-heart"></i> My Favorites</h2>
        </div>
        <div class="loading-container">
          <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i>
          </div>
          <p>Loading your favorite stories...</p>
        </div>
      </section>
    `}showError(e){this.app.innerHTML=`
      <section class="container">
        <div class="favorites-header">
          <h2><i class="fas fa-heart"></i> My Favorites</h2>
        </div>
        <div class="alert alert-danger">
          <i class="fas fa-exclamation-circle"></i>
          <p>${e}</p>
          <button class="btn btn-secondary" onclick="window.location.reload()">
            <i class="fas fa-redo"></i> Try Again
          </button>
        </div>
      </section>
    `}showToast(e,t="success"){const o=document.createElement("div");o.className=`toast toast-${t}`,o.innerHTML=`
      <div class="toast-content">
        <i class="fas ${t==="success"?"fa-check-circle":"fa-exclamation-circle"}"></i>
        <span>${e}</span>
      </div>
    `,document.body.appendChild(o),setTimeout(()=>o.classList.add("show"),100),setTimeout(()=>{o.classList.remove("show"),setTimeout(()=>document.body.removeChild(o),300)},3e3)}removeFavoriteFromView(e){const t=document.querySelector(`[data-story-id="${e}"]`);t&&(t.style.transition="opacity 0.3s ease, transform 0.3s ease",t.style.opacity="0",t.style.transform="scale(0.95)",setTimeout(()=>{t.remove();const o=document.querySelectorAll(".story-card[data-story-id]");if(o.length===0){document.getElementById("favorites-container").innerHTML=this._renderEmptyState();const i=document.querySelector(".favorites-subtitle");i&&(i.textContent="No favorite stories yet. Start adding some!")}else{const i=document.querySelector(".favorites-subtitle");if(i){const r=o.length;i.textContent=`You have ${r} favorite ${r===1?"story":"stories"}`}}},300))}_truncateText(e,t){return e.length<=t?e:e.substring(0,t)+"..."}_formatDate(e){return new Date(e).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}_formatRelativeDate(e){const t=new Date(e),i=Math.abs(new Date-t),r=Math.floor(i/(1e3*60*60*24));return r===0?"today":r===1?"yesterday":r<7?`${r} days ago`:r<30?`${Math.floor(r/7)} weeks ago`:`${Math.floor(r/30)} months ago`}}class J{constructor(){this.element=null}render(){const e=document.createElement("div");return e.className="not-found-container",e.innerHTML=`
      <div class="not-found-content">
        <div class="not-found-icon">
          <i class="fas fa-search"></i>
          <span class="icon-404">404</span>
        </div>
        <h1>Page Not Found</h1>
        <p>Oops! The page you're looking for doesn't exist.</p>
        <p>It might have been moved, deleted, or you entered the wrong URL.</p>
        <div class="not-found-actions">
          <button id="go-home-btn" class="btn btn-primary">
            <i class="fas fa-home"></i> Go to Home
          </button>
          <button id="go-back-btn" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Go Back
          </button>
        </div>        <div class="not-found-suggestions">
          <h3>You might want to:</h3>
          <ul>
            <li><a href="#/">Browse all stories</a></li>
            <li><a href="#/add">Share your story</a></li>
            <li><a href="#/map">Explore story locations</a></li>
          </ul>
        </div>
      </div>
    `,this.element=e,this.bindEvents(),e}bindEvents(){const e=this.element.querySelector("#go-home-btn"),t=this.element.querySelector("#go-back-btn");e.addEventListener("click",()=>{window.location.hash="#/"}),t.addEventListener("click",()=>{window.history.length>1?window.history.back():window.location.hash="#/"})}show(){const e=document.getElementById("app-container");e.innerHTML="",e.appendChild(this.render()),document.title="Page Not Found - Dicoding Story App",this.element.style.opacity="0",this.element.style.transform="translateY(20px)",requestAnimationFrame(()=>{this.element.style.transition="opacity 0.3s ease, transform 0.3s ease",this.element.style.opacity="1",this.element.style.transform="translateY(0)"})}}class A{constructor(){this.vapidPublicKey="BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",this.apiUrl="https://story-api.dicoding.dev/v1"}async init(){if(!("serviceWorker"in navigator))return console.warn("Service Worker not supported"),!1;if(!("PushManager"in window))return console.warn("Push messaging not supported"),!1;if(!("Notification"in window))return console.warn("Notifications not supported"),!1;try{if(await this.requestPermission()!=="granted")return console.warn("Notification permission not granted"),!1;const t=await navigator.serviceWorker.ready;return console.log("Using VitePWA Service Worker:",t),await this.subscribeUser(t),!0}catch(e){return console.error("Error initializing notifications:",e),!1}}isPushNotificationSupported(){return"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window}async requestPermission(){return Notification.permission==="default"?await Notification.requestPermission():Notification.permission}async subscribeUser(e){try{const t=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this.urlBase64ToUint8Array(this.vapidPublicKey)});return console.log("User subscribed to push notifications:",t),await this.sendSubscriptionToServer(t),t}catch(t){throw console.error("Failed to subscribe user:",t),t}}async sendSubscriptionToServer(e){try{const t=localStorage.getItem("token");if(!t)return console.warn("No auth token available for subscription"),!1;const o={endpoint:e.endpoint,keys:{p256dh:e.keys.p256dh,auth:e.keys.auth}},r=await(await fetch(`${this.apiUrl}/notifications/subscribe`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify(o)})).json();return r.error===!1?(console.log("Successfully subscribed to push notifications:",r),!0):(console.error("Failed to subscribe:",r.message),!1)}catch(t){return console.error("Error sending subscription to server:",t),!1}}async showNotification(e,t={}){if(Notification.permission!=="granted"){console.warn("Notification permission not granted");return}const o={icon:"/icons/app-icon.svg",badge:"/icons/app-icon.svg",vibrate:[200,100,200],tag:"story-notification",renotify:!0,requireInteraction:!1,...t};try{const i=await navigator.serviceWorker.ready;i?await i.showNotification(e,o):new Notification(e,o)}catch(i){console.error("Error showing notification:",i);try{new Notification(e,o)}catch(r){console.error("Fallback notification also failed:",r)}}}async showStoryNotification(e){if(console.log("Showing story notification for:",e),console.log("Notification permission:",Notification.permission),Notification.permission!=="granted"&&(console.warn("Notification permission not granted, requesting permission..."),await this.requestPermission()!=="granted")){console.error("User denied notification permission");return}const t="Story berhasil dibuat",o={body:`Anda telah membuat story baru dengan deskripsi: ${e.description}`,icon:"/icons/app-icon.svg",image:e.photoUrl&&e.photoUrl!=="default-image"?e.photoUrl:void 0,data:{url:`/#/story/${e.id}`,storyId:e.id},tag:"story-created",requireInteraction:!0,actions:[{action:"view",title:"View Story",icon:"/icons/app-icon.svg"},{action:"close",title:"Close",icon:"/icons/app-icon.svg"}]};try{console.log("Attempting to show notification with options:",o),console.log("Using simple browser notification");const i=new Notification(t,{body:o.body,icon:o.icon,tag:o.tag,requireInteraction:!1,data:o.data});console.log("Browser notification created successfully"),i.onclick=function(r){console.log("Notification clicked"),r.preventDefault(),window.focus(),o.data&&o.data.url&&(window.location.hash=o.data.url),i.close()},console.log("Story notification displayed successfully")}catch(i){console.error("Error displaying story notification:",i);try{console.log("Using minimal fallback notification"),new Notification("Story berhasil dibuat",{body:"Story Anda telah berhasil dibuat!"}),console.log("Minimal notification sent successfully")}catch(r){console.error("All notification methods failed:",r)}}}async showWelcomeNotification(){const e={body:"Welcome to Dicoding Story App! Start sharing your stories.",icon:"/icons/app-icon.svg",data:{url:"/#/add"},actions:[{action:"add-story",title:"Add Story",icon:"/icons/app-icon.svg"}]};await this.showNotification("Welcome to Story App!",e)}async showOfflineNotification(){const e={body:"You are currently offline. Some features may be limited.",icon:"/icons/app-icon.svg",tag:"offline-notification"};await this.showNotification("You are offline",e)}async showOnlineNotification(){const e={body:"You are back online! All features are now available.",icon:"/icons/app-icon.svg",tag:"online-notification"};await this.showNotification("You are online",e)}urlBase64ToUint8Array(e){const t="=".repeat((4-e.length%4)%4),o=(e+t).replace(/-/g,"+").replace(/_/g,"/"),i=window.atob(o),r=new Uint8Array(i.length);for(let n=0;n<i.length;++n)r[n]=i.charCodeAt(n);return r}isSupported(){return"Notification"in window&&"serviceWorker"in navigator&&"PushManager"in window}isEnabled(){return Notification.permission==="granted"}async testNotification(){if(console.log("Testing notification..."),console.log("Notification permission:",Notification.permission),console.log("Push supported:",this.isPushNotificationSupported()),Notification.permission==="granted")try{new Notification("Test Notification",{body:"This is a test notification to verify functionality",icon:"/icons/app-icon.svg"}),console.log("Simple notification sent"),await this.showNotification("Service Worker Test",{body:"This is a service worker notification test"}),console.log("Service worker notification sent")}catch(e){console.error("Test notification failed:",e)}else console.warn("Notification permission not granted")}async testSimpleNotification(){console.log("Testing simple notification...");try{if(Notification.permission==="granted"){const e=new Notification("Test Notification",{body:"This is a test notification",icon:"/icons/app-icon.svg"});return console.log("Simple test notification sent successfully"),e.onclick=function(){console.log("Test notification clicked"),e.close()},!0}else return console.log("Permission not granted for notifications"),!1}catch(e){return console.error("Test notification failed:",e),!1}}getPermissionStatus(){return"Notification"in window?Notification.permission:"not-supported"}async getSubscription(){try{return await(await navigator.serviceWorker.ready).pushManager.getSubscription()}catch(e){return console.error("Error getting subscription:",e),null}}async subscribeNotification(){try{const e=await navigator.serviceWorker.ready;return await this.subscribeUser(e)}catch(e){throw console.error("Error subscribing to notifications:",e),e}}async unsubscribeNotification(){try{const t=await(await navigator.serviceWorker.ready).pushManager.getSubscription();return t?await t.unsubscribe()?(await this.sendUnsubscriptionToServer(t),console.log("Successfully unsubscribed from push notifications"),!0):(console.error("Failed to unsubscribe"),!1):(console.log("No subscription to unsubscribe from"),!0)}catch(e){throw console.error("Error unsubscribing from notifications:",e),e}}async sendUnsubscriptionToServer(e){try{const t=localStorage.getItem("token");if(!t)return console.warn("No auth token available for unsubscription"),!1;const i=await(await fetch(`${this.apiUrl}/notifications/subscribe`,{method:"DELETE",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:e.endpoint})})).json();return i.error===!1?(console.log("Successfully unsubscribed from server:",i),!0):(console.error("Failed to unsubscribe from server:",i.message),!1)}catch(t){return console.error("Error sending unsubscription to server:",t),!1}}async registerServiceWorker(){try{return await navigator.serviceWorker.ready}catch(e){throw console.error("Error getting service worker:",e),e}}}const K="modulepreload",Z=function(s){return"/dicoding-story-app/"+s},I={},Q=function(e,t,o){let i=Promise.resolve();if(t&&t.length>0){let n=function(l){return Promise.all(l.map(f=>Promise.resolve(f).then(d=>({status:"fulfilled",value:d}),d=>({status:"rejected",reason:d}))))};document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),c=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));i=n(t.map(l=>{if(l=Z(l),l in I)return;I[l]=!0;const f=l.endsWith(".css"),d=f?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${l}"]${d}`))return;const h=document.createElement("link");if(h.rel=f?"stylesheet":K,f||(h.as="script"),h.crossOrigin="",h.href=l,c&&h.setAttribute("nonce",c),document.head.appendChild(h),f)return new Promise((_,F)=>{h.addEventListener("load",_),h.addEventListener("error",()=>F(new Error(`Unable to preload CSS for ${l}`)))})}))}function r(n){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=n,window.dispatchEvent(a),!a.defaultPrevented)throw n}return i.then(n=>{for(const a of n||[])a.status==="rejected"&&r(a.reason);return e().catch(r)})};function X(s={}){const{immediate:e=!1,onNeedRefresh:t,onOfflineReady:o,onRegistered:i,onRegisteredSW:r,onRegisterError:n}=s;let a,c;const l=async(d=!0)=>{await c};async function f(){if("serviceWorker"in navigator){if(a=await Q(async()=>{const{Workbox:d}=await import("./workbox-window.prod.es5-B9K5rw8f.js");return{Workbox:d}},[]).then(({Workbox:d})=>new d("/dicoding-story-app/sw.js",{scope:"/dicoding-story-app/",type:"classic"})).catch(d=>{n==null||n(d)}),!a)return;a.addEventListener("activated",d=>{(d.isUpdate||d.isExternal)&&window.location.reload()}),a.addEventListener("installed",d=>{d.isUpdate||o==null||o()}),a.register({immediate:e}).then(d=>{r?r("/dicoding-story-app/sw.js",d):i==null||i(d)}).catch(d=>{n==null||n(d)})}}return c=f(),l}class ee{constructor({view:e,model:t}){this.view=e,this.model=t,this.stories=[],this._attachEventListeners()}_attachEventListeners(){document.addEventListener("favorite:toggle",async e=>{await this._handleFavoriteToggle(e.detail.storyId,e.detail.storyData)})}async init(){this.view.render();try{if(this.model.isLoggedIn()){const e=await this.model.getStories(1,10,1);e.error?(console.error("Failed to fetch stories:",e.message),this.view.render([])):(this.stories=e.listStory,this.view.render(this.stories),await this._updateFavoriteButtons())}else window.location.hash="#/login"}catch(e){console.error("Error initializing home page:",e),this.view.render([])}}async _updateFavoriteButtons(){try{for(const e of this.stories){const t=await this.model.isFavorite(e.id);this.view.updateFavoriteButton(e.id,t)}}catch(e){console.error("Error updating favorite buttons:",e)}}async _handleFavoriteToggle(e,t){try{console.log("Toggling favorite for story:",e);const o=await this.model.isFavorite(e);let i;if(o){if(i=await this._removeFavorite(e),i.success){this.view.updateFavoriteButton(e,!1);const r=i.offline?"Removed from favorites (will sync when online)":"Removed from favorites";this.view.showToast(r,"success")}}else{const r=await this._getFullStoryData(e,t);if(i=await this._addFavorite(r),i.success){this.view.updateFavoriteButton(e,!0);const n=i.offline?"Added to favorites (will sync when online)":"Added to favorites";this.view.showToast(n,"success")}}i.success||(this.view.showToast("Failed to update favorite","error"),this.view.updateFavoriteButton(e,o))}catch(o){console.error("Error toggling favorite:",o),this.view.showToast("Failed to update favorite","error")}}async _getFullStoryData(e,t){try{const o=await this.model.getStoryDetail(e);if(!o.error&&o.story)return o.story}catch(o){console.error("Error getting full story data:",o)}return{id:e,...t,createdAt:new Date().toISOString()}}async _addFavorite(e){try{return navigator.onLine?(await this.model.addToFavorites(e),{success:!0,offline:!1}):await this._queueOfflineAction("add",e.id,e)}catch(t){return console.error("Error adding favorite:",t),{success:!1,error:t.message}}}async _removeFavorite(e){try{return navigator.onLine?(await this.model.removeFromFavorites(e),{success:!0,offline:!1}):await this._queueOfflineAction("remove",e)}catch(t){return console.error("Error removing favorite:",t),{success:!1,error:t.message}}}async _queueOfflineAction(e,t,o=null){try{const i=JSON.parse(localStorage.getItem("pending_favorite_actions")||"[]"),r={id:Date.now(),action:e,storyId:t,storyData:o,timestamp:new Date().toISOString()};return i.push(r),localStorage.setItem("pending_favorite_actions",JSON.stringify(i)),console.log("Queued offline favorite action:",r),{success:!0,offline:!0}}catch(i){return console.error("Error queuing offline action:",i),{success:!1,error:i.message}}}cleanup(){}}class te{constructor({view:e,model:t}){this.view=e,this.model=t,this.currentStoryId=null,this._bindEvents()}_bindEvents(){document.addEventListener("favorite:toggle",this._handleFavoriteToggle.bind(this)),window.addEventListener("online",this._syncPendingActions.bind(this))}async init(e){this.view.render(null,!0),this.currentStoryId=e;try{if(this.model.isLoggedIn()){const t=await this.model.getStoryDetail(e);this.view.render(t,!1),t&&t.story&&await this._updateFavoriteButtonState(t.story.id)}else window.location.hash="#/login"}catch(t){console.error("Error fetching story details:",t),this.view.render({error:!0,message:t.message},!1)}}async _updateFavoriteButtonState(e){try{const t=await this.model.isFavorite(e);this.view.updateFavoriteButton(e,t)}catch(t){console.error("Error checking favorite status:",t)}}async _handleFavoriteToggle(e){const{storyId:t,storyData:o}=e.detail;if(t===this.currentStoryId)try{const i=await this.model.isFavorite(t);navigator.onLine?(i?(await this.model.removeFavorite(t),this._showToast("Removed from favorites","success")):(await this.model.addFavorite(o),this._showToast("Added to favorites","success")),await this._updateFavoriteButtonState(t)):(await this._queueOfflineAction(i?"remove":"add",t,o),this._showToast("Action queued for when you're back online","info"),this.view.updateFavoriteButton(t,!i))}catch(i){console.error("Error toggling favorite:",i),this._showToast("Failed to update favorite","error")}}async _queueOfflineAction(e,t,o=null){const r=JSON.parse(localStorage.getItem("pending_favorite_actions")||"[]").filter(n=>n.storyId!==t);r.push({action:e,storyId:t,storyData:o,timestamp:Date.now()}),localStorage.setItem("pending_favorite_actions",JSON.stringify(r))}async _syncPendingActions(){try{const e=JSON.parse(localStorage.getItem("pending_favorite_actions")||"[]");if(e.length===0)return;console.log("Syncing pending favorite actions:",e.length);for(const t of e)try{t.action==="add"&&t.storyData?await this.model.addFavorite(t.storyData):t.action==="remove"&&await this.model.removeFavorite(t.storyId)}catch(o){console.error("Error syncing action:",t,o)}localStorage.removeItem("pending_favorite_actions"),this.currentStoryId&&await this._updateFavoriteButtonState(this.currentStoryId),this._showToast("Favorites synced successfully","success")}catch(e){console.error("Error syncing pending actions:",e)}}_showToast(e,t="info"){document.querySelectorAll(".toast").forEach(n=>n.remove());const i=document.createElement("div");i.className=`toast toast-${t}`,i.innerHTML=`
      <span>${e}</span>
      <button class="toast-close">&times;</button>
    `,document.body.appendChild(i),setTimeout(()=>{i.parentNode&&i.remove()},3e3);const r=i.querySelector(".toast-close");r&&r.addEventListener("click",()=>i.remove())}}class oe{constructor({view:e,model:t}){this.view=e,this.model=t,this.notificationHelper=new A,this._initListener()}async init(){this.view.render();try{if(await this.notificationHelper.init(),console.log("Notification helper initialized for add story page"),Notification.permission==="default"){console.log("Requesting notification permission...");const e=await this.notificationHelper.requestPermission();console.log("Permission result:",e)}}catch(e){console.warn("Failed to initialize notifications:",e)}}_initListener(){document.addEventListener("story:submit",async e=>{try{const{formData:t}=e.detail;console.log("Submitting story:",t.get("description"));const o=await this.model.addStory(t);if(console.log("Story submission result:",o),!o.error)try{console.log("Attempting to show notification...");const i={id:o.id||Date.now(),description:t.get("description"),photoUrl:o.photoUrl||"default-image"};try{if(console.log("Attempting to show story notification..."),Notification.permission==="granted"){const r=new Notification("Story berhasil dibuat",{body:`Anda telah membuat story baru dengan deskripsi: ${i.description}`,icon:"/icons/app-icon.svg"});r.onclick=function(){console.log("Story notification clicked"),r.close()},console.log("Story notification sent successfully")}else console.warn("Notification permission not granted:",Notification.permission)}catch(r){console.error("Failed to show story notification:",r)}}catch(i){console.error("Failed to show notification:",i)}console.log("Calling view.showSubmitResult with:",o),this.view.showSubmitResult(o),console.log("showSubmitResult called successfully")}catch(t){console.error("Error submitting story:",t),this.view.showSubmitResult({error:!0,message:t.message})}})}cleanup(){document.removeEventListener("story:submit",this._handleSubmit),this.view.cleanup()}}class ie{constructor({view:e,model:t}){this.view=e,this.model=t,this._initListener()}renderLogin(){return this.view.renderLogin(),document.getElementById("login-form")!==null}renderRegister(){return this.view.renderRegister(),document.getElementById("register-form")!==null}ensureFormRendered(e){return e==="login"&&!document.getElementById("login-form")?this.renderLogin():e==="register"&&!document.getElementById("register-form")?this.renderRegister():!0}_initListener(){document.addEventListener("auth:login",async e=>{try{const{email:t,password:o}=e.detail,i=await this.model.login(t,o);let r=0;const n=3;let a=this.ensureFormRendered("login");const c=()=>{a?(this.view.showAuthResult(i,"login"),i.error||this._updateNavbar()):r<n?(r++,console.log(`Retrying to render login form (attempt ${r})`),setTimeout(()=>{a=this.ensureFormRendered("login"),c()},200)):(console.error("Failed to render login form after multiple attempts"),i.error||(window.location.hash="#/"))};setTimeout(c,100)}catch(t){console.error("Login error:",t);const o=this.ensureFormRendered("login");setTimeout(()=>{o?this.view.showAuthResult({error:!0,message:t.message},"login"):(console.error("Failed to render login form to show error"),alert(`Login error: ${t.message}`))},100)}}),document.addEventListener("auth:register",async e=>{try{const{name:t,email:o,password:i}=e.detail,r=await this.model.register(t,o,i);let n=0;const a=3;let c=this.ensureFormRendered("register");const l=()=>{c?this.view.showAuthResult(r,"register"):n<a?(n++,console.log(`Retrying to render register form (attempt ${n})`),setTimeout(()=>{c=this.ensureFormRendered("register"),l()},200)):(console.error("Failed to render register form after multiple attempts"),r.error||(alert("Registration successful! Please log in."),window.location.hash="#/login"))};setTimeout(l,100)}catch(t){console.error("Registration error:",t);const o=this.ensureFormRendered("register");setTimeout(()=>{o?this.view.showAuthResult({error:!0,message:t.message},"register"):(console.error("Failed to render register form to show error"),alert(`Registration error: ${t.message}`))},100)}})}_updateNavbar(){const e=document.getElementById("loginLink");if(this.model.isLoggedIn()){const t=localStorage.getItem("name");e.innerHTML=`<i class="fas fa-sign-out-alt"></i> Logout (${t})`,e.href="#/logout"}else e.innerHTML='<i class="fas fa-sign-in-alt"></i> Login',e.href="#/login"}}class re{constructor({view:e,model:t}){this.view=e,this.model=t}async init(){try{if(this.model.isLoggedIn()){const e=await this.model.getStories(1,50,1);if(e.error)console.error("Failed to fetch stories for map:",e.message),this.view.render([]);else{const t=e.listStory.filter(o=>o.lat&&o.lon);this.view.render(t)}}else window.location.hash="#/login"}catch(e){console.error("Error initializing map page:",e),this.view.render([])}}}class se{constructor({view:e,model:t}){this.view=e,this.model=t,this.favorites=[],this.pendingOfflineActions=[],this._attachEventListeners()}_attachEventListeners(){document.addEventListener("favorite:toggle",async e=>{await this._handleFavoriteToggle(e.detail.storyId)}),window.addEventListener("online",()=>{this._processPendingOfflineActions()})}async init(){try{console.log("Initializing Favorites page..."),this.view.showLoadingState(),this.favorites=await this.model.getFavorites(),console.log("Loaded favorites:",this.favorites),this.view.render(this.favorites),navigator.onLine&&await this._processPendingOfflineActions()}catch(e){console.error("Error initializing favorites:",e),this.view.showError("Failed to load favorites. Please try again.")}}async _handleFavoriteToggle(e){try{console.log("Toggling favorite for story:",e),this.favorites.some(o=>o.id===e)?await this._removeFavorite(e):(console.warn("Story not in favorites list, cannot remove"),this.view.showToast("Story not found in favorites","error"))}catch(t){console.error("Error toggling favorite:",t),this.view.showToast("Failed to update favorite","error")}}async _removeFavorite(e){try{navigator.onLine?(await this.model.removeFromFavorites(e),this.view.showToast("Removed from favorites","success")):(this._queueOfflineAction("remove",e),this.view.showToast("Favorite will be updated when online","success")),this.favorites=this.favorites.filter(t=>t.id!==e),this.view.removeFavoriteFromView(e)}catch(t){console.error("Error removing favorite:",t),this.view.showToast("Failed to remove favorite","error")}}_queueOfflineAction(e,t,o=null){const i={id:Date.now(),action:e,storyId:t,storyData:o,timestamp:new Date().toISOString()};this.pendingOfflineActions.push(i),localStorage.setItem("pending_favorite_actions",JSON.stringify(this.pendingOfflineActions)),console.log("Queued offline action:",i)}async _processPendingOfflineActions(){try{const e=localStorage.getItem("pending_favorite_actions");if(e&&(this.pendingOfflineActions=JSON.parse(e)),this.pendingOfflineActions.length===0)return;console.log("Processing pending offline actions:",this.pendingOfflineActions);const t=[];for(const o of this.pendingOfflineActions)try{o.action==="add"?(await this.model.addToFavorites(o.storyData),console.log("Synced add favorite action for story:",o.storyId)):o.action==="remove"&&(await this.model.removeFromFavorites(o.storyId),console.log("Synced remove favorite action for story:",o.storyId)),t.push(o.id)}catch(i){console.error("Error processing offline action:",o,i)}this.pendingOfflineActions=this.pendingOfflineActions.filter(o=>!t.includes(o.id)),this.pendingOfflineActions.length===0?localStorage.removeItem("pending_favorite_actions"):localStorage.setItem("pending_favorite_actions",JSON.stringify(this.pendingOfflineActions)),t.length>0&&(console.log(`Synced ${t.length} pending favorite actions`),this.view.showToast(`Synced ${t.length} pending changes`,"success"),await this.refreshFavorites())}catch(e){console.error("Error processing pending offline actions:",e)}}async refreshFavorites(){try{this.favorites=await this.model.getFavorites(),this.view.render(this.favorites)}catch(e){console.error("Error refreshing favorites:",e)}}async addFavorite(e){try{return console.log("Adding story to favorites:",e.id),navigator.onLine?(await this.model.addToFavorites(e),{success:!0,offline:!1}):(this._queueOfflineAction("add",e.id,e),{success:!0,offline:!0})}catch(t){return console.error("Error adding favorite:",t),{success:!1,error:t.message}}}async removeFavorite(e){try{return console.log("Removing story from favorites:",e),navigator.onLine?(await this.model.removeFromFavorites(e),{success:!0,offline:!1}):(this._queueOfflineAction("remove",e),{success:!0,offline:!0})}catch(t){return console.error("Error removing favorite:",t),{success:!1,error:t.message}}}async isFavorite(e){try{return await this.model.isFavorite(e)}catch(t){return console.error("Error checking favorite status:",t),!1}}cleanup(){}}class ne{constructor(){this.model=new z,this.notificationHelper=new A,this.dbHelper=new B,this.homeView=new W,this.storyDetailView=new q,this.addStoryView=new V,this.authView=new j,this.mapView=new Y,this.favoritesView=new G,this.notFoundView=new J,this.homePresenter=new ee({view:this.homeView,model:this.model}),this.storyDetailPresenter=new te({view:this.storyDetailView,model:this.model}),this.addStoryPresenter=new oe({view:this.addStoryView,model:this.model}),this.authPresenter=new ie({view:this.authView,model:this.model}),this.mapPresenter=new re({view:this.mapView,model:this.model}),this.favoritesPresenter=new se({view:this.favoritesView,model:this.model}),window.addEventListener("hashchange",()=>{this.urlRouting()}),document.addEventListener("user:loggedIn",async()=>{console.log("User logged in, initializing notifications...");try{await this.notificationHelper.init(),console.log("Notifications initialized after login")}catch(e){console.warn("Failed to initialize notifications after login:",e)}}),this.initPWA(),this.setupOnlineOfflineListeners(),this.urlRouting(),this.updateNavbar()}urlRouting(){if(this.isRouting){console.log("Routing already in progress, skipping");return}if(this.isRouting=!0,document.startViewTransition)try{document.startViewTransition(()=>{this._handleRouting(),this.isRouting=!1})}catch(e){console.error("Error in view transition:",e),this._handleRouting(),this.isRouting=!1}else this._handleRouting(),this.isRouting=!1}_handleRouting(){try{const e=window.location.hash||"#/";if(console.log("Routing to:",e),this.currentPresenter===this.addStoryPresenter)try{this.addStoryPresenter.cleanup()}catch(t){console.error("Error cleaning up add story presenter:",t)}if(e.startsWith("#/story/")){const t=e.substring(8);if(!t){console.error("Invalid story ID in URL"),window.location.hash="#/";return}this.storyDetailPresenter.init(t),this.currentPresenter=this.storyDetailPresenter}else if(e==="#/add"){if(!this.model.isLoggedIn()){window.location.hash="#/login";return}this.addStoryPresenter.init(),this.currentPresenter=this.addStoryPresenter}else if(e==="#/login")this.authPresenter.renderLogin(),this.currentPresenter=this.authPresenter;else if(e==="#/register")this.authPresenter.renderRegister(),this.currentPresenter=this.authPresenter;else if(e==="#/logout")this.model.logout(),this.updateNavbar(),window.location.hash="#/login";else if(e==="#/map"||e==="#map"){console.log("Initializing map page");try{this.mapPresenter.init(),this.currentPresenter=this.mapPresenter,console.log("Map presenter initialized successfully")}catch(t){console.error("Error initializing map presenter:",t)}}else if(e==="#/favorites"){if(!this.model.isLoggedIn()){window.location.hash="#/login";return}console.log("Initializing favorites page");try{this.favoritesPresenter.init(),this.currentPresenter=this.favoritesPresenter,console.log("Favorites presenter initialized successfully")}catch(t){console.error("Error initializing favorites presenter:",t)}}else e==="#home"||e==="#/"||e===""?this.model.isLoggedIn()?(this.homePresenter.init(),this.currentPresenter=this.homePresenter):window.location.hash="#/login":(console.log("Unknown route:",e),this.notFoundView.show(),this.currentPresenter=null)}catch(e){console.error("Error in routing:",e);try{this.authPresenter.renderLogin(),this.currentPresenter=this.authPresenter}catch(t){console.error("Failed to navigate to login page:",t),document.getElementById("app-container").innerHTML=`
          <div class="alert alert-danger">
            <p><i class="fas fa-exclamation-circle"></i> An error occurred. Please try refreshing the page.</p>
          </div>
        `}}}updateNavbar(){const e=document.getElementById("loginLink"),t=document.getElementById("favoritesLink");if(this.model.isLoggedIn()){const o=localStorage.getItem("name");e.innerHTML=`<i class="fas fa-sign-out-alt"></i> Logout (${o})`,e.href="#/logout",t&&(t.style.display="block"),this._initPushNotification()}else e.innerHTML='<i class="fas fa-sign-in-alt"></i> Login',e.href="#/login",t&&(t.style.display="none")}async _initPushNotification(){try{if(this.notificationHelper.isPushNotificationSupported()&&(await this.notificationHelper.registerServiceWorker(),!await this.notificationHelper.getSubscription()&&confirm("Would you like to receive notifications when new stories are posted?")))try{await this.notificationHelper.subscribeNotification(),console.log("User successfully subscribed to notifications")}catch(o){console.error("Error subscribing to notifications:",o)}}catch(e){console.error("Error initializing push notifications:",e)}}async initPWA(){try{await this.dbHelper.initDB(),console.log("IndexedDB initialized"),await this.notificationHelper.init()&&(console.log("Push notifications initialized"),await this.notificationHelper.showWelcomeNotification()),this.registerServiceWorker(),this.checkForUpdates(),this.setupInstallPrompt(),this.checkPWAInstallStatus()}catch(e){console.error("Error initializing PWA features:",e)}}registerServiceWorker(){X({onNeedRefresh(){console.log("New version available"),document.dispatchEvent(new CustomEvent("sw-update-available"))},onOfflineReady(){console.log("App ready to work offline"),document.dispatchEvent(new CustomEvent("sw-offline-ready"))}}),document.addEventListener("sw-update-available",()=>{this.showUpdateAvailable()}),document.addEventListener("sw-offline-ready",()=>{this.showOfflineReady()})}setupOnlineOfflineListeners(){window.addEventListener("online",async()=>{console.log("App is back online");try{Notification.permission==="granted"&&new Notification("Back Online",{body:"You are back online. Syncing your offline stories...",icon:"/icons/app-icon.svg"})}catch(e){console.error("Error showing online notification:",e)}await this.syncOfflineData(),this.updateOnlineStatus(!0),(window.location.hash==="#/"||window.location.hash==="")&&(console.log("Refreshing home page after sync"),setTimeout(()=>{this.loadPage()},1e3))}),window.addEventListener("offline",async()=>{console.log("App is offline");try{Notification.permission==="granted"&&new Notification("You are Offline",{body:"You can still add stories. They will be synced when you're back online.",icon:"/icons/app-icon.svg"})}catch(e){console.error("Error showing offline notification:",e)}this.updateOnlineStatus(!1)})}async syncOfflineData(){try{const e=await this.model.syncOfflineStories();e>0&&(console.log(`Synced ${e} offline stories`),"Notification"in window&&Notification.permission==="granted"&&new Notification("Stories Synced",{body:`${e} offline stories have been synced`,icon:"/icons/icon-144x144.svg",badge:"/icons/icon-144x144.svg"}),(window.location.hash===""||window.location.hash==="#home")&&this.homePresenter.init())}catch(e){console.error("Error syncing offline data:",e)}}updateOnlineStatus(e){const t=document.querySelector(".offline-indicator");if(!e&&!t){const o=document.createElement("div");o.className="offline-indicator",o.innerHTML='<i class="fas fa-wifi"></i> You are offline',o.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: #ff9800;
        color: white;
        text-align: center;
        padding: 8px;
        z-index: 10000;
        font-size: 14px;
      `,document.body.prepend(o)}else e&&t&&t.remove()}showUpdateAvailable(){const e=document.createElement("div");e.className="update-banner",e.innerHTML=`
      <div style="background: #4CAF50; color: white; padding: 12px; text-align: center; position: fixed; top: 0; left: 0; right: 0; z-index: 10001;">
        <span>A new version is available!</span>
        <button onclick="window.location.reload()" style="margin-left: 10px; background: white; color: #4CAF50; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer;">
          Update Now
        </button>
        <button onclick="this.parentElement.parentElement.remove()" style="margin-left: 5px; background: transparent; color: white; border: 1px solid white; padding: 4px 8px; border-radius: 4px; cursor: pointer;">
          Later
        </button>
      </div>
    `,document.body.prepend(e)}showOfflineReady(){const e=document.createElement("div");e.className="offline-ready-banner",e.innerHTML=`
      <div style="background: #2196F3; color: white; padding: 12px; text-align: center; position: fixed; top: 0; left: 0; right: 0; z-index: 10001;">
        <span><i class="fas fa-wifi-slash"></i> App is ready to work offline!</span>
        <button onclick="this.parentElement.parentElement.remove()" style="margin-left: 10px; background: transparent; color: white; border: 1px solid white; padding: 4px 8px; border-radius: 4px; cursor: pointer;">
          Got it
        </button>
      </div>
    `,document.body.prepend(e),setTimeout(()=>{e.parentElement&&e.remove()},5e3)}checkForUpdates(){console.log("Update checking is handled by VitePWA registerSW")}setupInstallPrompt(){let e;const t=document.createElement("button");t.className="install-pwa",t.innerHTML='<i class="fas fa-download"></i> Install App',t.style.display="none",document.body.appendChild(t),window.addEventListener("beforeinstallprompt",o=>{console.log("PWA install prompt available"),o.preventDefault(),e=o,t.classList.add("show")}),t.addEventListener("click",async()=>{if(e){e.prompt();const{outcome:o}=await e.userChoice;console.log(`PWA install outcome: ${o}`),console.log(o==="accepted"?"User accepted PWA install":"User dismissed PWA install"),e=null,t.classList.remove("show")}}),window.addEventListener("appinstalled",o=>{console.log("PWA was installed"),t.classList.remove("show"),"Notification"in window&&Notification.permission==="granted"&&new Notification("App Installed!",{body:"Dicoding Story App has been installed successfully",icon:"/icons/icon-144x144.svg",badge:"/icons/icon-144x144.svg"})})}checkPWAInstallStatus(){window.matchMedia("(display-mode: standalone)").matches&&(console.log("App is running as PWA"),document.body.classList.add("pwa-mode")),"serviceWorker"in navigator&&"BeforeInstallPromptEvent"in window&&console.log("PWA install capability available")}showSyncStatus(e,t=!1){let o=document.querySelector(".sync-status");o||(o=document.createElement("div"),o.className="sync-status",document.body.appendChild(o)),o.textContent=e,o.className=`sync-status ${t?"error":""}`,o.classList.add("show"),setTimeout(()=>{o.classList.remove("show")},3e3)}}document.addEventListener("DOMContentLoaded",()=>{try{window.app=new ne,console.log("Application initialized successfully")}catch(s){console.error("Failed to initialize application:",s),document.getElementById("app-container").innerHTML=`
      <div class="container">
        <div class="alert alert-danger">
          <h2><i class="fas fa-exclamation-triangle"></i> Application Error</h2>
          <p>Failed to initialize the application. Please try refreshing the page.</p>
          <p>Error details: ${s.message}</p>
          <button onclick="window.location.reload()" class="btn">Reload Page</button>
        </div>
      </div>
    `}});
//# sourceMappingURL=main-C5JAmAhH.js.map
